数据接收
    蓝牙
    rest api
    mqtt

固定定时任务
    收集发送状态
    ntp
    

cron



while True:
    time.sleep(1)




# 
# 设备初始化
# 检查设备是否已经初始化
# 如果未初始化
#   载入全局配置，然后初始化各种默认值
# 是否有按键
# 有按键：
#   如果按键超过5秒：
#       设置LED1 每 1 秒闪烁
#       继续检查按键
#       又超过 30 秒：
#           设置LED1 每 300 毫秒闪烁，进入彻底初始化模式
#       否则：
#            进入BlueFi模式
#   进入普通运行模式
#
# 运行模式
#   运行模式配置检查
#   如果检查失败，进入低功耗模式，灯每10秒闪一次
#   连接Wifi
#   设置定时器和定时任务
#       比如： wifi检查，低功耗睡眠，命令检查灯
#   进入运行模式循环
#       查看接收命令并允许
#       检查定时任务并

# 通讯方式总结
# 1. 被动模式 - 局域通讯
# 1.1 被动蓝牙
# 1.2 被动rest api
# 1.3 被动 mqtt
# 2. 主动方式 - 局域或云
# 2.1 主动蓝牙到HUB
# 2.2 主动 MQTT
# 2.2.1 到HUB
# 2.2.2 到云服务器
# 通讯保护方式总结
# 1. 被动模式
# 1.1 蓝牙 - 
# 通讯认证和保护方式总结
# 0. 设备密钥
#   设备密钥 - 每个设备随机生成的16位字符串，可以重置
#   授权码 - YBB云端随机生成的UUID
#   授权码payload - 授权码：时间戳：salt：hash
#   外部程序获取设备密钥的方式
#   1. 在YBB云平台登录并获取授权码
#   2. 在规定时间内，使用授权码通过以下方法获取设备密钥
#   2.1 被动蓝牙 - 通过特殊的payload
#   2.2 被动rest api - 通过特殊的 api endpoint
#   2.3 被动mqtt - 通过特殊的命令
#   授权码使用过程 - 基于YBB 安全站点
#       登录用户向YBB云请求随机授权码payload和临时密码
#       发送授权码payload到设备
#       设备验证授权码：
#           发送授权码payload到YBB云，云端返回结果和相同的临时密码
#       验证成功： 返回通过临时密码加密的设备密钥给请求者
#   授权码hash = base64（sha256（授权码：时间戳：salt））
#   YBB 云端操作：
#       请求授权码： 必须是登录用户，生成授权码和临时密码，以key（授权码），value（临时密码）的方式保存到Redis， TTL=5分钟
#       验证授权码： 验证hash值后，从Redis取出临时密码返回 200，如果没有 返回 404 和空值
# 1. 令牌和加密（）
#   每次通讯包含令牌
#   AES 加密（半动态密钥）加密payload
#   格式： 时间戳:salt:加密的payload:hash
#   加密密钥=约定密钥：时间戳：salt
#   密文=AES（加密密钥，文本内容）
#   密文payload=base64（密文）
#   hash=base64（sha256（时间戳:salt:密文payload）)
#   